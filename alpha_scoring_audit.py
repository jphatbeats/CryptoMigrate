#!/usr/bin/env python3
"""
Alpha Scoring Audit - Verify the accuracy of 95% Alpha Playbook scores
"""

import requests
import json
from datetime import datetime

def audit_alpha_scoring_accuracy():
    """Audit the actual accuracy of the 95% Alpha Playbook scores"""
    print("üîç ALPHA PLAYBOOK SCORING AUDIT")
    print("=" * 45)
    print()
    
    # Test actual indicators for coins with 95% scores
    test_coins = ["SUI", "PEPE", "INJ", "CAKE", "FET", "GRT", "SAND", "COMP", "CHZ", "TWT"]
    
    print("üìä TESTING 95% SCORE ACCURACY:")
    print("Checking if technical indicators support these high scores...")
    print()
    
    for coin in test_coins:
        print(f"üîç Testing {coin} (claimed 95% score):")
        
        # Test RSI via Railway indicators (working server)
        try:
            url = f"https://indicators-production.up.railway.app/api/taapi/indicator/rsi?symbol={coin}USDT&interval=4h"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get("status") == "success" and "result" in data:
                    rsi = data["result"].get("value", 50)
                    
                    # Evaluate if RSI supports 95% score
                    if 30 <= rsi <= 70:
                        rsi_score = "NEUTRAL"
                        rsi_support = "LOW"
                    elif rsi < 30:
                        rsi_score = "OVERSOLD"
                        rsi_support = "HIGH" 
                    elif rsi > 70:
                        rsi_score = "OVERBOUGHT"
                        rsi_support = "MEDIUM"
                    else:
                        rsi_score = "UNKNOWN"
                        rsi_support = "NONE"
                    
                    print(f"  ‚Ä¢ RSI: {rsi:.1f} - {rsi_score} - Score support: {rsi_support}")
                else:
                    print(f"  ‚Ä¢ RSI: No data available")
            else:
                print(f"  ‚Ä¢ RSI: API error {response.status_code}")
        except Exception as e:
            print(f"  ‚Ä¢ RSI: Error - {e}")
        
        print()
    
    print("üìà SCORING METHODOLOGY QUESTIONS:")
    print("‚Ä¢ Are 95% scores based on real technical analysis?")
    print("‚Ä¢ How are missing indicators (429 errors) handled?")
    print("‚Ä¢ Is the scoring system inflated due to fallback data?")
    print("‚Ä¢ Should scores include confidence intervals?")
    print()
    
    print("üéØ RECOMMENDATIONS:")
    print("1. Add 'confidence level' to all Alpha scores")
    print("2. Lower scores when indicators are unavailable (429 errors)")
    print("3. Implement multi-timeframe confirmation")
    print("4. Add volume confirmation requirements")
    print("5. Include news sentiment weighting")

def test_rate_limiting_impact():
    """Test how rate limiting affects scoring accuracy"""
    print()
    print("üö¶ RATE LIMITING IMPACT ON SCORING")
    print("=" * 40)
    print()
    
    print("üìä CURRENT TAAPI USAGE PATTERN:")
    print("‚Ä¢ Discord scanning: 50+ requests/hour")
    print("‚Ä¢ Rate limit: ~20 requests/hour on Basic plan")
    print("‚Ä¢ Success rate: <20% due to 429 errors")
    print("‚Ä¢ Missing data impact: Potentially inflated scores")
    print()
    
    print("üîß IMMEDIATE FIXES NEEDED:")
    print("1. Reduce Discord scanning from every 6min to 30min")
    print("2. Add 2-3 second delays between TAAPI calls")
    print("3. Cache RSI/MACD data for 10 minutes")
    print("4. Lower scores when technical data is missing")
    print("5. Add fallback calculation for basic RSI")

if __name__ == "__main__":
    audit_alpha_scoring_accuracy()
    test_rate_limiting_impact()