<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Alpha Detection Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0f0f0f 0%, #1a1a1a 100%);
            color: #ffffff;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .header h1 {
            color: #00ff88;
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 0 0 20px rgba(0, 255, 136, 0.3);
        }
        
        .status-bar {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            border: 1px solid rgba(0, 255, 136, 0.2);
        }
        
        .scan-controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }
        
        .scan-btn {
            background: linear-gradient(45deg, #00ff88, #00cc6a);
            border: none;
            padding: 15px 30px;
            border-radius: 10px;
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 16px;
        }
        
        .scan-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 255, 136, 0.3);
        }
        
        .scan-btn:disabled {
            background: #333;
            cursor: not-allowed;
            transform: none;
        }
        
        .dashboard-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .panel {
            background: rgba(255, 255, 255, 0.03);
            border-radius: 15px;
            padding: 25px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }
        
        .panel h3 {
            color: #00ff88;
            margin-bottom: 20px;
            font-size: 1.4rem;
        }
        
        .results-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .coin-card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 20px;
            border-left: 4px solid #00ff88;
            transition: all 0.3s ease;
        }
        
        .coin-card:hover {
            transform: translateY(-3px);
            background: rgba(255, 255, 255, 0.08);
        }
        
        .coin-symbol {
            font-size: 1.3rem;
            font-weight: bold;
            color: #00ff88;
            margin-bottom: 10px;
        }
        
        .metrics {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            font-size: 0.9rem;
        }
        
        .metric {
            background: rgba(0, 0, 0, 0.3);
            padding: 8px;
            border-radius: 6px;
        }
        
        .metric-label {
            color: #888;
            font-size: 0.8rem;
        }
        
        .metric-value {
            color: #fff;
            font-weight: bold;
        }
        
        .confluence-indicator {
            text-align: center;
            padding: 10px;
            border-radius: 8px;
            margin-top: 15px;
            font-weight: bold;
        }
        
        .high-confluence {
            background: rgba(0, 255, 136, 0.2);
            color: #00ff88;
            border: 1px solid #00ff88;
        }
        
        .medium-confluence {
            background: rgba(255, 193, 7, 0.2);
            color: #ffc107;
            border: 1px solid #ffc107;
        }
        
        .low-confluence {
            background: rgba(255, 59, 48, 0.2);
            color: #ff3b30;
            border: 1px solid #ff3b30;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #888;
        }
        
        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            border-top: 3px solid #00ff88;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .alert-box {
            background: rgba(255, 59, 48, 0.1);
            border: 1px solid #ff3b30;
            border-radius: 10px;
            padding: 15px;
            margin: 20px 0;
            color: #ff3b30;
        }
        
        .success-box {
            background: rgba(0, 255, 136, 0.1);
            border: 1px solid #00ff88;
            border-radius: 10px;
            padding: 15px;
            margin: 20px 0;
            color: #00ff88;
        }
        
        @media (max-width: 768px) {
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
            
            .scan-controls {
                flex-direction: column;
                align-items: center;
            }
            
            .header h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ ALPHA DETECTION MACHINE</h1>
            <p>Systematic Early Entry Detection System</p>
        </div>
        
        <div class="status-bar">
            <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap;">
                <div><strong>System Status:</strong> <span id="systemStatus">Ready</span></div>
                <div><strong>Last Scan:</strong> <span id="lastScan">Never</span></div>
                <div><strong>Opportunities Found:</strong> <span id="opportunityCount">0</span></div>
                <div><strong>Next Scan:</strong> <span id="nextScan">Manual</span></div>
            </div>
        </div>
        
        <div class="scan-controls">
            <button class="scan-btn" onclick="runMorningScan()">üåÖ MORNING SCAN</button>
            <button class="scan-btn" onclick="runMidDayScan()">‚òÄÔ∏è MID-DAY CHECK</button>
            <button class="scan-btn" onclick="runEveningScan()">üåô EVENING WRAP</button>
            <button class="scan-btn" onclick="emergencyScan()">‚ö° EMERGENCY SCAN</button>
        </div>
        
        <div class="dashboard-grid">
            <div class="panel">
                <h3>üìä Technical Breakouts</h3>
                <div id="technicalResults">
                    <div class="loading">
                        <div>Click a scan button to start detecting opportunities</div>
                    </div>
                </div>
            </div>
            
            <div class="panel">
                <h3>üì± Social Momentum</h3>
                <div id="socialResults">
                    <div class="loading">
                        <div>Waiting for social momentum data...</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="panel">
            <h3>üíé HIGH CONFLUENCE OPPORTUNITIES</h3>
            <div id="confluenceResults">
                <div class="loading">
                    <div>Run a scan to find confluence opportunities</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let scanData = {
            technical: [],
            social: [],
            confluence: []
        };
        
        let isScanning = false;
        
        function updateStatus(status) {
            document.getElementById('systemStatus').textContent = status;
        }
        
        function updateLastScan() {
            const now = new Date();
            document.getElementById('lastScan').textContent = now.toLocaleTimeString();
        }
        
        function showLoading(elementId, message = "Scanning...") {
            document.getElementById(elementId).innerHTML = `
                <div class="loading">
                    <div class="spinner"></div>
                    <div>${message}</div>
                </div>
            `;
        }
        
        function showError(elementId, message) {
            document.getElementById(elementId).innerHTML = `
                <div class="alert-box">
                    <strong>‚ö†Ô∏è Error:</strong> ${message}
                </div>
            `;
        }
        
        function showSuccess(elementId, message) {
            document.getElementById(elementId).innerHTML = `
                <div class="success-box">
                    <strong>‚úÖ Success:</strong> ${message}
                </div>
            `;
        }
        
        async function runMorningScan() {
            if (isScanning) return;
            
            isScanning = true;
            updateStatus("Running Morning Scan...");
            
            // Disable all buttons
            document.querySelectorAll('.scan-btn').forEach(btn => btn.disabled = true);
            
            try {
                // Step 1: Technical Scan
                showLoading('technicalResults', 'Scanning for technical breakouts...');
                await simulateTechnicalScan();
                
                // Step 2: Social Scan  
                showLoading('socialResults', 'Analyzing social momentum...');
                await simulateSocialScan();
                
                // Step 3: Find Confluence
                showLoading('confluenceResults', 'Finding confluence opportunities...');
                await findConfluence();
                
                updateStatus("Morning Scan Complete");
                updateLastScan();
                
            } catch (error) {
                updateStatus("Scan Failed");
                showError('confluenceResults', 'Scan failed. Please try again.');
            } finally {
                isScanning = false;
                document.querySelectorAll('.scan-btn').forEach(btn => btn.disabled = false);
            }
        }
        
        async function runMidDayScan() {
            // Same structure as morning scan but different focus
            updateStatus("Running Mid-Day Check...");
            showSuccess('confluenceResults', 'Mid-day scan would check for new breakouts since morning');
        }
        
        async function runEveningScan() {
            updateStatus("Running Evening Wrap...");
            showSuccess('confluenceResults', 'Evening scan would summarize daily opportunities and prepare for tomorrow');
        }
        
        async function emergencyScan() {
            updateStatus("Running Emergency Scan...");
            showSuccess('confluenceResults', 'Emergency scan would check for sudden market movements and opportunities');
        }
        
        // Simulation functions (replace with real API calls)
        async function simulateTechnicalScan() {
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            const mockTechnical = [
                {
                    symbol: 'RARE/USDT',
                    change: '+88%',
                    volume: '3.2x avg',
                    rsi: 56.3,
                    bbPosition: 'Breaking Upper',
                    confluence: 'high'
                },
                {
                    symbol: 'DATA/USDT', 
                    change: '+81%',
                    volume: '2.8x avg',
                    rsi: 60.0,
                    bbPosition: 'Above Middle',
                    confluence: 'medium'
                },
                {
                    symbol: 'SYN/USDT',
                    change: '+66%',
                    volume: '1.9x avg', 
                    rsi: 64.7,
                    bbPosition: 'Near Upper',
                    confluence: 'low'
                }
            ];
            
            scanData.technical = mockTechnical;
            displayTechnicalResults(mockTechnical);
        }
        
        async function simulateSocialScan() {
            await new Promise(resolve => setTimeout(resolve, 1500));
            
            const mockSocial = [
                {
                    symbol: 'RARE',
                    engagement: '2,847%',
                    mentions: '450% ‚Üë',
                    sentiment: '82%',
                    creators: '124 ‚Üë',
                    confluence: 'high'
                },
                {
                    symbol: 'TROLL',
                    engagement: '1,305%', 
                    mentions: '680% ‚Üë',
                    sentiment: '76%',
                    creators: '89 ‚Üë',
                    confluence: 'medium'
                }
            ];
            
            scanData.social = mockSocial;
            displaySocialResults(mockSocial);
        }
        
        async function findConfluence() {
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // Find coins that appear in both technical and social scans
            const confluence = [];
            
            scanData.technical.forEach(tech => {
                const social = scanData.social.find(s => s.symbol === tech.symbol.split('/')[0]);
                if (social) {
                    confluence.push({
                        symbol: tech.symbol,
                        technicalScore: tech.confluence,
                        socialScore: social.confluence,
                        overallScore: calculateConfluenceScore(tech, social),
                        signals: {
                            priceChange: tech.change,
                            volume: tech.volume,
                            engagement: social.engagement,
                            sentiment: social.sentiment
                        }
                    });
                }
            });
            
            scanData.confluence = confluence;
            displayConfluenceResults(confluence);
            
            // Update opportunity count
            document.getElementById('opportunityCount').textContent = confluence.length;
        }
        
        function calculateConfluenceScore(technical, social) {
            // Simple scoring algorithm
            let score = 0;
            if (technical.confluence === 'high') score += 3;
            else if (technical.confluence === 'medium') score += 2;
            else score += 1;
            
            if (social.confluence === 'high') score += 3;
            else if (social.confluence === 'medium') score += 2;
            else score += 1;
            
            if (score >= 5) return 'high';
            if (score >= 3) return 'medium';
            return 'low';
        }
        
        function displayTechnicalResults(results) {
            const html = results.map(coin => `
                <div class="coin-card">
                    <div class="coin-symbol">${coin.symbol}</div>
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-label">Price Change</div>
                            <div class="metric-value">${coin.change}</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Volume</div>
                            <div class="metric-value">${coin.volume}</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">RSI</div>
                            <div class="metric-value">${coin.rsi}</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">BB Position</div>
                            <div class="metric-value">${coin.bbPosition}</div>
                        </div>
                    </div>
                </div>
            `).join('');
            
            document.getElementById('technicalResults').innerHTML = html;
        }
        
        function displaySocialResults(results) {
            const html = results.map(coin => `
                <div class="coin-card">
                    <div class="coin-symbol">$${coin.symbol}</div>
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-label">Engagement</div>
                            <div class="metric-value">${coin.engagement}</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Mentions</div>
                            <div class="metric-value">${coin.mentions}</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Sentiment</div>
                            <div class="metric-value">${coin.sentiment}</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Creators</div>
                            <div class="metric-value">${coin.creators}</div>
                        </div>
                    </div>
                </div>
            `).join('');
            
            document.getElementById('socialResults').innerHTML = html;
        }
        
        function displayConfluenceResults(results) {
            if (results.length === 0) {
                document.getElementById('confluenceResults').innerHTML = `
                    <div class="alert-box">
                        No confluence opportunities found. Technical and social signals not aligned.
                    </div>
                `;
                return;
            }
            
            const html = results.map(coin => `
                <div class="coin-card">
                    <div class="coin-symbol">${coin.symbol}</div>
                    <div class="confluence-indicator ${coin.overallScore}-confluence">
                        ${coin.overallScore.toUpperCase()} CONFLUENCE
                    </div>
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-label">Price Change</div>
                            <div class="metric-value">${coin.signals.priceChange}</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Volume</div>
                            <div class="metric-value">${coin.signals.volume}</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Social Engagement</div>
                            <div class="metric-value">${coin.signals.engagement}</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Sentiment</div>
                            <div class="metric-value">${coin.signals.sentiment}</div>
                        </div>
                    </div>
                </div>
            `).join('');
            
            document.getElementById('confluenceResults').innerHTML = `
                <div class="results-grid">${html}</div>
            `;
        }
        
        // Initialize dashboard
        updateStatus("Ready");
    </script>
</body>
</html>