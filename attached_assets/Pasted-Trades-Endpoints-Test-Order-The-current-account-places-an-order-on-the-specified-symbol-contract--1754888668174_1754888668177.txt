Trades Endpoints
Test Order
The current account places an order on the specified symbol contract. (Supports limit order, market order, market order for plan e ...
 more
Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

POST /openApi/swap/v2/trade/order/test

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequeststopLoss/takeProfitResponse
symbol
string
yes
There must be a hyphen/ "-" in...
type
string
yes
LIMIT: Limit Order / MARKET: M...
side
string
yes
buying and selling direction S...
positionSide
string
no
Position direction, required f...
reduceOnly
string
no
true, false; Default value is ...
price
float64
no
Price, represents the trailing...
quantity
float64
no
Original quantity, only suppor...
stopPrice
float64
no
Trigger price, only required f...
priceRate
float64
no
For type: TRAILING_STOP_MARKET...
timestamp
int64
yes
request timestamp, unit: milli...
stopLoss
string
no
Support setting stop loss whil...
takeProfit
string
no
Support setting take profit wh...
clientOrderId
string
no
Customized order ID for users,...
recvWindow
int64
no
Request valid time window valu...
timeInForce
string
no
Time in Force, currently suppo...
closePosition
string
no
true, false; all position squa...
activationPrice
float64
no
Used with TRAILING_STOP_MARKET...
stopGuaranteed
string
no
true: Enables the guaranteed s...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/order/test'
    method = "POST"
    paramsMap = {
    "symbol": "BTC-USDT",
    "side": "BUY",
    "positionSide": "LONG",
    "type": "MARKET",
    "quantity": 5,
    "takeProfit": "{\"type\": \"TAKE_PROFIT_MARKET\", \"stopPrice\": 31968.0,\"price\": 31968.0,\"workingType\":\"MARK_PRICE\"}"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Place order
The current account places an order on the specified symbol contract. (Supports limit order, market order, market order for plan e ...
 more
Key steps for using the API

Trading Rules:

Trading Rules: https://bingx.com/en/tradeInfo/perpetual/trading-rules/BTC-USDT/
About price accuracy and quantity accuracy reference interface: https://open-api.bingx.com/openApi/swap/v2/quote/contracts
If the accuracy exceeds the range of the current period, the current API order will still be successful, but it will be truncated. For example, the price requirement is: 0.0001, if the order is 0.123456, it will be successfully submitted with 0.1234.
1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

POST /openApi/swap/v2/trade/order

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequeststopLoss/takeProfitResponse
symbol
string
yes
There must be a hyphen/ "-" in...
type
string
yes
LIMIT: Limit Order / MARKET: M...
side
string
yes
buying and selling direction S...
positionSide
string
no
Position direction, required f...
reduceOnly
string
no
true, false; Default value is ...
price
float64
no
Price, represents the trailing...
quantity
float64
no
Original quantity, only suppor...
stopPrice
float64
no
Trigger price, only required f...
priceRate
float64
no
For type: TRAILING_STOP_MARKET...
stopLoss
string
no
Support setting stop loss whil...
takeProfit
string
no
Support setting take profit wh...
workingType
string
no
StopPrice trigger price types:...
timestamp
int64
yes
request timestamp, unit: milli...
clientOrderId
string
no
Customized order ID for users,...
recvWindow
int64
no
Request valid time window valu...
timeInForce
string
no
Time in Force, currently suppo...
closePosition
string
no
true, false; all position squa...
activationPrice
float64
no
Used with TRAILING_STOP_MARKET...
stopGuaranteed
string
no
true: Enables the guaranteed s...
positionId
int64
no
In the Separate Isolated mode,...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/order'
    method = "POST"
    paramsMap = {
    "symbol": "BTC-USDT",
    "side": "BUY",
    "positionSide": "LONG",
    "type": "MARKET",
    "quantity": 5,
    "takeProfit": "{\"type\": \"TAKE_PROFIT_MARKET\", \"stopPrice\": 31968.0,\"price\": 31968.0,\"workingType\":\"MARK_PRICE\"}"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Place order in demo trading
The current account places an order on the specified symbol contract. (Supports limit order, market order, market order for plan e ...
 more
1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

POST /openApi/swap/v2/trade/order

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequeststopLoss/takeProfitResponse
symbol
string
yes
There must be a hyphen/ "-" in...
type
string
yes
LIMIT: Limit Order / MARKET: M...
side
string
yes
buying and selling direction S...
positionSide
string
no
Position direction, required f...
reduceOnly
string
no
true, false; Default value is ...
price
float64
no
Price, represents the trailing...
quantity
float64
no
Original quantity, only suppor...
stopPrice
float64
no
Trigger price, only required f...
priceRate
float64
no
For type: TRAILING_STOP_MARKET...
stopLoss
string
no
Support setting stop loss whil...
takeProfit
string
no
Support setting take profit wh...
workingType
string
no
StopPrice trigger price types:...
timestamp
int64
yes
request timestamp, unit: milli...
clientOrderId
string
no
Customized order ID for users,...
recvWindow
int64
no
Request valid time window valu...
timeInForce
string
no
Time in Force, currently suppo...
closePosition
string
no
true, false; all position squa...
activationPrice
float64
no
Used with TRAILING_STOP_MARKET...
stopGuaranteed
string
no
true: Enables the guaranteed s...
positionId
int64
no
In the Separate Isolated mode,...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/order'
    method = "POST"
    paramsMap = {
    "symbol": "BTC-USDT",
    "side": "BUY",
    "positionSide": "LONG",
    "type": "MARKET",
    "quantity": 5,
    "takeProfit": "{\"type\": \"TAKE_PROFIT_MARKET\", \"stopPrice\": 31968.0,\"price\": 31968.0,\"workingType\":\"MARK_PRICE\"}"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Place multiple orders
The current account performs batch order operations on the specified symbol contract ...
 more
Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

POST /openApi/swap/v2/trade/batchOrders

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestOrderstopLoss/takeProfitResponse
batchOrders
LIST<Order>
yes
Order list, supporting up to 5...
timestamp
int64
yes
request timestamp, unit: milli...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/batchOrders'
    method = "POST"
    paramsMap = {
    "batchOrders": "[{\"symbol\": \"ETH-USDT\",\"type\": \"MARKET\",\"side\": \"BUY\",\"positionSide\": \"LONG\",\"quantity\": 1},{\"symbol\": \"BTC-USDT\",\"type\": \"MARKET\",\"side\": \"BUY\",\"positionSide\": \"LONG\",\"quantity\": 0.001}]"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Close All Positions
One-click liquidation of all positions under the current account. Note that one-click liquidation is triggered by a market order.

Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

POST /openApi/swap/v2/trade/closeAllPositions

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
symbol
string
no
Trading pair, for example: BTC...
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/closeAllPositions'
    method = "POST"
    paramsMap = {
    "symbol": "BTC-USDT"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Cancel Order
Cancel an order that the current account is in the current entrusted state.

Key steps for using the API

The cancellation api is limited to one second and can only cancel the same orderId or clientOrderId. Please do not resubmit
1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

DELETE /openApi/swap/v2/trade/order

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
orderId
int64
no
Order ID
symbol
string
yes
There must be a hyphen/ "-" in...
clientOrderId
string
no
Customized order ID for users,...
timestamp
int64
yes
request timestamp, unit: milli...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/order'
    method = "DELETE"
    paramsMap = {
    "orderId": "1736011869418901234",
    "symbol": "RNDR-USDT",
    "timestamp": "1702732515704"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Cancel multiple orders
Batch cancellation of some of the orders whose current account is in the current entrusted state.

Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

DELETE /openApi/swap/v2/trade/batchOrders

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponseOrder
orderIdList
LIST<int64>
no
system order number, up to 10 ...
clientOrderIdList
LIST<string>
no
Customized order ID for users,...
symbol
string
yes
There must be a hyphen/ "-" in...
timestamp
int64
yes
request timestamp, unit: milli...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/batchOrders'
    method = "DELETE"
    paramsMap = {
    "orderIdList": "[1735924831603391122, 1735924833239172233]",
    "symbol": "BTC-USDT",
    "timestamp": "1702711750843"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Cancel All Open Orders
Cancel all orders in the current entrusted state of the current account.

Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

DELETE /openApi/swap/v2/trade/allOpenOrders

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponseOrderFailOrder
symbol
string
no
There must be a hyphen/ "-" in...
type
string
no
LIMIT: Limit Order / MARKET: M...
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/allOpenOrders'
    method = "DELETE"
    paramsMap = {
    "recvWindow": "0",
    "symbol": "ATOM-USDT",
    "type": "LIMIT",
    "timestamp": "1702732849363"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Current All Open Orders
Query all orders that the user is currently entrusted with.

Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

GET /openApi/swap/v2/trade/openOrders

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponsestatus
symbol
string
no
There must be a hyphen/ "-" in...
type
string
no
LIMIT: Limit Order / MARKET: M...
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/openOrders'
    method = "GET"
    paramsMap = {
    "symbol": "BTC-USDT",
    "type": "LIMIT",
    "timestamp": "1702733126509"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query pending order status
Query order details

Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

GET /openApi/swap/v2/trade/openOrder

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Read
Content-Type:  
  
RequestResponsestatus
symbol
string
yes
There must be a hyphen/ "-" in...
orderId
int64
no
Order ID
clientOrderId
string
no
Customized order ID for users,...
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/openOrder'
    method = "GET"
    paramsMap = {
    "orderId": "1736012449498123456",
    "symbol": "OP-USDT",
    "timestamp": "1702733255486"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query Order details
Query order details

Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

GET /openApi/swap/v2/trade/order

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Read
Content-Type:  
  
RequestResponsestatus
symbol
string
yes
There must be a hyphen/ "-" in...
orderId
int64
no
Order ID
clientOrderId
string
no
Customized order ID for users,...
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/order'
    method = "GET"
    paramsMap = {
    "orderId": "1736012449498123456",
    "symbol": "OP-USDT",
    "timestamp": "1702733255486"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query Margin Type
Query the user's margin mode on the specified symbol contract: isolated, cross or separated isolated.

Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

GET /openApi/swap/v2/trade/marginType

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Read
Content-Type:  
  
RequestResponsemarginType
symbol
string
yes
There must be a hyphen/ "-" in...
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/marginType'
    method = "GET"
    paramsMap = {
    "symbol": "WOO-USDT",
    "timestamp": "1702733469134"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Change Margin Type
Change the user's margin mode on the specified symbol contract: isolated margin, cross margin and separated isolated margin.

Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

POST /openApi/swap/v2/trade/marginType

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponsemarginType
symbol
string
yes
There must be a hyphen/ "-" in...
timestamp
int64
yes
request timestamp in milliseco...
marginType
string
yes
Margin mode ISOLATED (isolated...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/marginType'
    method = "POST"
    paramsMap = {
    "symbol": "MINA-USDT",
    "marginType": "CROSSED",
    "recvWindow": "60000",
    "timestamp": "1702733445917"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query Leverage and Available Positions
Query the opening leverage and available positions of the user in the specified symbol contract.

Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

GET /openApi/swap/v2/trade/leverage

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Read
Content-Type:  
  
RequestResponse
symbol
string
yes
There must be a hyphen/ "-" in...
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/leverage'
    method = "GET"
    paramsMap = {
    "symbol": "BCH-USDT",
    "timestamp": "1702733572940"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Set Leverage
Adjust the user's opening leverage in the specified symbol contract.

Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

POST /openApi/swap/v2/trade/leverage

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
symbol
string
yes
There must be a hyphen/ "-" in...
side
string
yes
Leverage for long or short pos...
timestamp
int64
yes
request timestamp in milliseco...
leverage
int64
yes
leverage
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/leverage'
    method = "POST"
    paramsMap = {
    "leverage": "8",
    "side": "SHORT",
    "symbol": "ETH-USDT",
    "timestamp": "1702733704941"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
User's Force Orders
Query the user's forced liquidation order.

Key steps for using the API

If "autoCloseType" is not passed, both forced liquidation orders and ADL liquidation orders will be returned

If "startTime" is not passed, only the data within 7 days before "endTime" will be returned

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

GET /openApi/swap/v2/trade/forceOrders

rate limitation by UID: 10/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
symbol
string
no
There must be a hyphen/ "-" in...
currency
string
no
USDC or USDT
autoCloseType
string
no
"LIQUIDATION":liquidation orde...
startTime
int64
no
Start time, unit: millisecond
endTime
int64
no
End time, unit: millisecond
limit
int
no
The number of returned result ...
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/forceOrders'
    method = "GET"
    paramsMap = {
    "symbol": "ATOM-USDT",
    "startTime": "1696291200",
    "timestamp": "1699982303257"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query Order history
Query the user's historical orders (order status is completed or canceled).

Key steps for using the API

The maximum query time range shall not exceed 7 days

Query data within the last 7 days by default

Return order list sorted by updateTime from smallest to largest

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

GET /openApi/swap/v2/trade/allOrders

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
symbol
string
no
There must be a hyphen/ "-" in...
currency
string
no
USDC or USDT
orderId
int64
no
Only return subsequent orders,...
startTime
int64
no
Start time, unit: millisecond
endTime
int64
no
End time, unit: millisecond
limit
int
yes
number of result sets to retur...
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/allOrders'
    method = "GET"
    paramsMap = {
    "endTime": "1702731995000",
    "limit": "500",
    "startTime": "1702688795000",
    "symbol": "PYTH-USDT",
    "timestamp": "1702731995838"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Modify Isolated Position Margin
Adjust the isolated margin funds for the positions in the isolated position mode.

Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

POST /openApi/swap/v2/trade/positionMargin

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
symbol
string
yes
There must be a hyphen/ "-" in...
amount
float64
yes
margin funds
type
int
yes
adjustment direction 1: increa...
positionSide
string
no
Position direction, and only L...
positionId
int64
no
Position ID, if it is filled, ...
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/positionMargin'
    method = "POST"
    paramsMap = {
    "recvWindow": "10000",
    "symbol": "BTC-USDT",
    "type": "1",
    "amount": "3",
    "positionSide": "LONG",
    "timestamp": "1702718148654"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query historical transaction orders
Obtain the transaction history of a certain transaction pair

Key steps for using the API

Explanation of Order List Retrieval Rules

Sorting: ORDER BY filledTime ASC, in ascending order of filledTime field
Maximum range: [From current date] up to past 30 days & maximum of 512 historical filled orders, startTs = [current date] - 30 days
If both startTs and endTs are provided, the data range returned is: startTs < orderList <= endTs
If only endTs is provided, the data range returned is: ([current date] - 30 days) < orderList <= endTs
If only startTs is provided, no data is returned
If orderId is provided, only the filled orders of that orderId are returned
1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

GET /openApi/swap/v2/trade/allFillOrders

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
orderId
int64
no
If orderId is provided, only t...
currency
string
no
USDC or USDT
tradingUnit
string
yes
Trading unit, optional values:...
startTs
int64
yes
Starting timestamp in millisec...
endTs
int64
yes
End timestamp in milliseconds
timestamp
int64
yes
request timestamp, unit: milli...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/allFillOrders'
    method = "GET"
    paramsMap = {
    "endTs": "1702731530000",
    "startTs": "1702724330000",
    "symbol": "WLD-USDT",
    "tradingUnit": "COIN",
    "timestamp": "1702731530753"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Set Position Mode
Used to set the position mode of perpetual contract, supporting both dual position mode and single position mode

*The Position Mode applies to all contracts and can be set when there are no active positions or pending orders.
Key steps for using the API

Interface Parameters

POST /openApi/swap/v1/positionSide/dual

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
dualSidePosition
true
Yes
"true": dual position mode; "f...
timestamp
int64
Yes
Timestamp of the request in mi...
recvWindow
int64
No
The window time for the reques...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/positionSide/dual'
    method = "POST"
    paramsMap = {
    "dualSidePosition": "true",
    "timestamp": "1702731530753"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query position mode
Used to get the position mode of perpetual contract, supporting both dual position mode and single position mode

Key steps for using the API

Interface Parameters

GET /openApi/swap/v1/positionSide/dual

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
timestamp
int64
Yes
Timestamp of the request in mi...
recvWindow
int64
No
The window time for the reques...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/positionSide/dual'
    method = "GET"
    paramsMap = {
    "timestamp": "1702731530753"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Cancel an Existing Order and Send a New Orde
This api is used to cancel an order and place a new one on the same trading pair.

Key steps for using the API

Interface Parameters

POST /openApi/swap/v1/trade/cancelReplace

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequeststopLoss/takeProfitResponseCancelResponseNewOrderResponse
cancelReplaceMode
string
yes
STOP_ON_FAILURE: If the order ...
cancelClientOrderId
string
no
The original client-defined or...
cancelOrderId
int64
no
The platform order ID to be ca...
cancelRestrictions
string
no
ONLY_NEW: If the order status ...
symbol
string
yes
There must be a hyphen/ "-" in...
type
string
yes
LIMIT: Limit Order / MARKET: M...
side
string
yes
buying and selling direction S...
positionSide
string
yes
Position direction, required f...
reduceOnly
string
no
true, false; Default value is ...
price
float64
no
Price, represents the trailing...
quantity
float64
no
Original quantity, only suppor...
stopPrice
float64
no
Trigger price, only required f...
priceRate
float64
no
For type: TRAILING_STOP_MARKET...
workingType
string
no
StopPrice trigger price types:...
stopLoss
string
no
Support setting stop loss whil...
takeProfit
string
no
Support setting take profit wh...
clientOrderId
string
no
Customized order ID for users,...
timestamp
int64
yes
request timestamp, unit: milli...
recvWindow
int64
no
Request valid time window valu...
closePosition
string
no
true, false; all position squa...
activationPrice
float64
no
Used with TRAILING_STOP_MARKET...
stopGuaranteed
string
no
true: Enables the guaranteed s...
timeInForce
string
no
Time in Force, currently suppo...
positionId
int64
no
In the Separate Isolated mode,...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/trade/cancelReplace'
    method = "POST"
    paramsMap = {
    "cancelReplaceMode": "STOP_ON_FAILURE",
    "cancelClientOrderId": "abc123test",
    "cancelOrderId": 123456789,
    "cancelRestrictions": "ONLY_NEW",
    "symbol": "BTC-USDT",
    "side": "BUY",
    "positionSide": "LONG",
    "type": "MARKET",
    "quantity": 5,
    "takeProfit": "{\"type\": \"TAKE_PROFIT_MARKET\", \"stopPrice\": 31968.0,\"price\": 31968.0,\"workingType\":\"MARK_PRICE\"}",
    "timestamp": "1702731530753"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Cancel orders in batches and place orders in batches
This api is used to cancel orders in batches and place orders in batches.

Key steps for using the API

Interface Parameters

POST /openApi/swap/v1/trade/batchCancelReplace

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestOrderRequeststopLoss/takeProfitResponseOrderResponseCancelResponseNewOrderResponse
batchOrders
string
yes
A batch of orders, string form...
timestamp
int64
yes
request timestamp, unit: milli...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/trade/batchCancelReplace'
    method = "POST"
    paramsMap = {
    "batchOrders": "[{\"cancelOrderId\": 1753337028434464768, \"cancelReplaceMode\": \"ALLOW_FAILURE\", \"symbol\": \"BTC-USDT\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"positionSide\": \"LONG\", \"price\": 38000, \"quantity\": 1, \"takeProfit\": \"{\\\"type\\\": \\\"TAKE_PROFIT\\\", \\\"quantity\\\": 1, \\\"stopPrice\\\": 45000, \\\"price\\\": 45000}\", \"stopLoss\": \"{\\\"type\\\": \\\"STOP\\\", \\\"quantity\\\": 1, \\\"stopPrice\\\": 37000, \\\"price\\\": 37000}\"}, {\"cancelOrderId\": 1753337028434464768, \"cancelReplaceMode\": \"ALLOW_FAILURE\", \"symbol\": \"BTC-USDT\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"positionSide\": \"LONG\", \"price\": 38000, \"quantity\": 1, \"takeProfit\": \"{\\\"type\\\": \\\"TAKE_PROFIT\\\", \\\"quantity\\\": 1, \\\"stopPrice\\\": 45000, \\\"price\\\": 45000}\", \"stopLoss\": \"{\\\"type\\\": \\\"STOP\\\", \\\"quantity\\\": 1, \\\"stopPrice\\\": 37000, \\\"price\\\": 37000}\"}, {\"cancelOrderId\": 1753337028434464768, \"cancelReplaceMode\": \"ALLOW_FAILURE\", \"symbol\": \"BTC-USDT\", \"type\": \"LIMIT\", \"side\": \"BUY\", \"positionSide\": \"LONG\", \"price\": 38000, \"quantity\": 1, \"takeProfit\": \"{\\\"type\\\": \\\"TAKE_PROFIT\\\", \\\"quantity\\\": 1, \\\"stopPrice\\\": 45000, \\\"price\\\": 45000}\", \"stopLoss\": \"{\\\"type\\\": \\\"STOP\\\", \\\"quantity\\\": 1, \\\"stopPrice\\\": 37000, \\\"price\\\": 37000}\"}]",
    "timestamp": "1702731530753"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Cancel All After
After the countdown ends, cancel all current pending orders. This request can be continuously maintained to constantly extend the penalty time.

Rate limit: 1 time/1s

If you have a large amount of pending orders, they will be canceled in batches, which may take several seconds to cancel in batches. In addition, during the process of canceling all pending orders, the system will reject further ACTIVATE and CLOSE requests. After the system has completed the task of canceling all pending orders, it can continue to accept ACTIVATE and CLOSE requests.
HTTP request

Interface parameters

POST /openApi/swap/v2/trade/cancelAllAfter

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
type
string
Yes
Request type: ACTIVATE-Activat...
timeOut
int
Yes
Activate countdown time (secon...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/cancelAllAfter'
    method = "POST"
    paramsMap = {
    "type": "ACTIVATE",
    "timeOut": 10
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Close position by position ID
Key steps for using the API

Interface Parameters

POST /openApi/swap/v1/trade/closePosition

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponseData
positionId
string
yes
Position ID, will close the po...
timestamp
int64
yes
Request timestamp, in millisec...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/trade/closePosition'
    method = "POST"
    paramsMap = {
    "timestamp": "1702731721672",
    "positionId": "1769649551460794368"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
All Orders
Query the user's historical orders (order status is fully executed, pending, newly created, partially executed, or cancelled.).

Key steps for using the API

The maximum query time range shall not exceed 7 days

Query data within the last 7 days by default

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

GET /openApi/swap/v1/trade/fullOrder

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Read
Content-Type:  
  
RequestResponse
symbol
string
no
There must be a hyphen/ "-" in...
orderId
int64
no
Only return subsequent orders,...
startTime
int64
no
Start time, unit: millisecond
endTime
int64
no
End time, unit: millisecond
limit
int
yes
number of result sets to retur...
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/trade/fullOrder'
    method = "GET"
    paramsMap = {
    "endTime": "1702731995000",
    "limit": "500",
    "startTime": "1702688795000",
    "symbol": "PYTH-USDT",
    "timestamp": "1702731995838"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Position and Maintenance Margin Ratio
Get information on Position and Maintenance Margin Ratio

Key steps for using the API

API Parameters

GET /openApi/swap/v1/maintMarginRatio

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Read
Content-Type:  
  
RequestResponse
symbol
string
Yes
Trading pair, e.g., BTC-USDT, ...
timestamp
int64
Yes
Request timestamp in milliseco...
recvWindow
int64
No
Request valid time window in m...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/maintMarginRatio'
    method = "GET"
    paramsMap = {
    "symbol": "BTC-USDT",
    "timestamp": "1702732072912",
    "recvWindow": "5000"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query historical transaction details
Obtain the transaction history details of a certain transaction pair

Key steps for using the API

Explanation of Order List Retrieval Rules

Sorting: ORDER BY filledTime ASC, in ascending order of filledTime field
Maximum range: [From current date] up to past 7 days & maximum of 1000 historical filled orders, startTs = [current date] - 7 days
If both startTs and endTs are provided, the data range returned is: startTs < orderList <= endTs
If only endTs is provided, the data range returned is: ([current date] - 7 days) < orderList <= endTs
If only startTs is provided, no data is returned
If orderId is provided, only the filled orders of that orderId are returned
1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

GET /openApi/swap/v2/trade/fillHistory

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Read
Content-Type:  
  
RequestResponse
symbol
string
Yes
Trading pair, e.g., BTC-USDT, ...
currency
string
no
USDC or USDT
orderId
int64
no
If orderId is provided, only t...
lastFillId
int64
no
The last tradeId of the last q...
startTs
int64
yes
Starting timestamp in millisec...
endTs
int64
yes
End timestamp in milliseconds
timestamp
int64
yes
request timestamp, unit: milli...
recvWindow
int64
no
Request valid time window valu...
pageIndex
int64
no
The page number must be greate...
pageSize
int64
no
The size of each page must be ...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/trade/fillHistory'
    method = "GET"
    paramsMap = {
    "endTs": "1702731530000",
    "startTs": "1702724330000",
    "symbol": "WLD-USDT",
    "lastFillId": 130753,
    "pageSize": 50,
    "timestamp": "1702731530753"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query Position History
Query the position history of perpetual contracts under the current account.

Key steps for using the API

API Parameters

GET /openApi/swap/v1/trade/positionHistory

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Read
Content-Type:  
  
RequestResponse
symbol
string
Yes
Trading pair, e.g.: BTC-USDT, ...
currency
string
no
USDC or USDT
timestamp
int64
Yes
Request timestamp, in millisec...
positionId
int64
No
Position ID, if not provided, ...
startTs
int64
Yes
Start timestamp, in millisecon...
endTs
int64
Yes
End timestamp, in milliseconds...
pageIndex
int64
No
Page number, must be greater t...
pageSize
int64
No
Page size, must be greater tha...
recvWindow
int64
No
Request valid window value, in...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/trade/positionHistory'
    method = "GET"
    paramsMap = {
    "recvWindow": "0",
    "symbol": "BNB-USDT",
    "pageId": 0,
    "pageSize": 20,
    "startTime": 1700409600000,
    "1703001599000": 1703001599000,
    "timestamp": "1702731661854"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Isolated Margin Change History
Used to query the history of margin adjustments for U-margin contracts in the last 30 days.

Key steps for using the API

API Parameters

GET /openApi/swap/v1/positionMargin/history

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Read
Content-Type:  
  
RequestResponse
symbol
string
Yes
Trading pair, e.g.: BTC-USDT, ...
positionId
string
Yes
Position ID
startTime
int64
Yes
Start timestamp, in millisecon...
endTime
int64
Yes
End timestamp, in milliseconds
pageIndex
int64
Yes
Page number, must be greater t...
pageSize
int64
Yes
Page size, must be greater tha...
timestamp
int64
Yes
Request timestamp, in millisec...
recvWindow
int64
No
Request valid window value, in...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/positionMargin/history'
    method = "GET"
    paramsMap = {
    "symbol": "BNB-USDT",
    "positionId": "1847596444958068736",
    "startTime": 1728722649000,
    "endTime": 1729336359406,
    "pageIndex": 1,
    "pageSize": 2,
    "timestamp": 1702731661854,
    "recvWindow": "0"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Apply VST
Apply VST assets for demo trading

Only available for demo trading, demo domain: https://open-api-vst.bingx.com
Key steps for using the API

API Parameters

POST /openApi/swap/v1/trade/getVst

rate limitation by UID: 1/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
timestamp
int64
Yes
Request timestamp in milliseco...
recvWindow
int64
No
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/trade/getVst'
    method = "POST"
    paramsMap = {
    "timestamp": 1730863321895
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Place TWAP Order
Create a Time Weighted Order (TWAP) order. This function will help you execute large orders in batches within 24 hours, thereby reducing the impact of large orders on market prices, making the average transaction price closer to the actual market price, and reducing your transaction costs.

Key steps for using the API

API Parameters

POST /openApi/swap/v1/twap/order

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
symbol
string
Yes
Trading pair, for example: BTC...
side
string
Yes
Buying and selling direction S...
positionSide
string
Yes
LONG or SHORT
priceType
string
Yes
Price limit type; constant: pr...
priceVariance
string
Yes
When type is constant, it repr...
triggerPrice
string
Yes
Trigger price, this price is t...
interval
int64
Yes
After the strategic order is s...
amountPerOrder
string
Yes
The quantity of a single order...
totalAmount
string
Yes
The total number of orders. Th...
timestamp
int64
Yes
The timestamp of the request i...
recvWindow
int64
No
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/twap/order'
    method = "POST"
    paramsMap = {
    "symbol": "BNB-USDT",
    "positionId": "1847596444958068736",
    "startTime": 1728722649000,
    "endTime": 1729336359406,
    "pageIndex": 1,
    "pageSize": 2,
    "timestamp": 1702731661854,
    "recvWindow": "0"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query TWAP Entrusted Order
Used to query orders in TWAP orders, that is, orders that have not been executed or are still being executed.

Key steps for using the API

API Parameters

GET /openApi/swap/v1/twap/openOrders

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Read
Content-Type:  
  
RequestResponse
symbol
string
No
Trading pair, for example: BTC...
timestamp
int64
Yes
the timestamp of the request i...
recvWindow
int64
No
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/twap/openOrders'
    method = "GET"
    paramsMap = {
    "symbol": "BNB-USDT",
    "timestamp": 1702731661854,
    "recvWindow": "0"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query TWAP Historical Orders
Used to query TWAP historical delegation records, including partially completed, completed, revoked and failed delegation。

Key steps for using the API

API Parameters

GET /openApi/swap/v1/twap/historyOrders

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Read
Content-Type:  
  
RequestResponse
symbol
string
No
Trading pair, for example: BTC...
pageIndex
int64
Yes
Paging parameters, the minimum...
pageSize
int64
Yes
Number of result sets returned...
startTime
int64
Yes
Start time, unit: milliseconds
endTime
int64
Yes
End time, unit: milliseconds
timestamp
int64
Yes
The timestamp of the request i...
recvWindow
int64
No
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/twap/historyOrders'
    method = "GET"
    paramsMap = {
    "symbol": "BNB-USDT",
    "pageIndex": 1,
    "pageSize": 100,
    "startTime": 1702731661854,
    "endTime": 1702738661854,
    "timestamp": 1702731661854,
    "recvWindow": "0"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
TWAP Order Details
Used to query the details of TWAP entrusted orders

Key steps for using the API

API Parameters

GET /openApi/swap/v1/twap/orderDetail

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Read
Content-Type:  
  
RequestResponse
mainOrderId
string
Yes
TWAP commission order number
timestamp
int64
Yes
The timestamp of the request i...
recvWindow
int64
No
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/twap/orderDetail'
    method = "GET"
    paramsMap = {
    "mainOrderId": "12312435134",
    "timestamp": 1702731661854,
    "recvWindow": "0"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Cancel TWAP Order
Used to cancel TWAP commission orders

Key steps for using the API

API Parameters

POST /openApi/swap/v1/twap/cancelOrder

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
mainOrderId
string
Yes
TWAP order number
timestamp
int64
Yes
The timestamp of the request i...
recvWindow
int64
No
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/twap/cancelOrder'
    method = "POST"
    paramsMap = {
    "mainOrderId": "12312435134",
    "timestamp": 1702731661854,
    "recvWindow": "0"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Switch Multi-Assets Mode
Switch account multi-assets mode

Only available for live trading, live trading domain: https://open-api.bingx.com
Key steps for using the API

Interface Parameters

POST /openApi/swap/v1/trade/assetMode

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
assetMode
string
Yes
multi-assets mode, singleAsset...
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/trade/assetMode'
    method = "POST"
    paramsMap = {
    "assetMode": "multiAssetsMode",
    "timestamp": 1730863321895
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query Multi-Assets Mode
Query account multi-assets mode

Only available for live trading, live trading domain: https://open-api.bingx.com
Key steps for using the API

Interface Parameters

GET /openApi/swap/v1/trade/assetMode

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/trade/assetMode'
    method = "GET"
    paramsMap = {
    "timestamp": 1730863321895
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query Multi-Assets Rules
Query platform-defined multi-assets rules

Only available for live trading, live trading domain: https://open-api.bingx.com
Key steps for using the API

Interface Parameters

GET /openApi/swap/v1/trade/multiAssetsRules

rate limitation by IP in group Number: 
API KEY permission: 
No API KEY signature required
Content-Type:  
  
RequestResponse
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/trade/multiAssetsRules'
    method = "GET"
    paramsMap = {
    "timestamp": 1730863321895
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query Multi-Assets Margin
Query multi-assets margin

Only available for live trading, live trading domain: https://open-api.bingx.com
Key steps for using the API

Interface Parameters

GET /openApi/swap/v1/user/marginAssets

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
timestamp
int64
Yes
Request timestamp in milliseco...
recvWindow
int64
No
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/user/marginAssets'
    method = "GET"
    paramsMap = {
    "timestamp": 1730863321895
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
One-Click Reverse Position
One-Click Reverse Position

Key steps for using the API

Interface Parameters

POST /openApi/swap/v1/trade/reverse

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Read
Content-Type:  
  
RequestResponse
type
string
Yes
Reverse type, Reverse: immedia...
symbol
string
Yes
Trading pair, e.g.: BTC-USDT
triggerPrice
string
No
Trigger price, required for pl...
workingType
string
No
TriggerPrice price type: MARK_...
timestamp
int64
Yes
Request timestamp in milliseco...
recvWindow
int64
No
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/trade/reverse'
    method = "POST"
    paramsMap = {
    "positionId": "1858503955839975424",
    "symbol": "BTC-USDT",
    "type": "Reverse"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Hedge mode Position - Automatic Margin Addition
In Hedge mode, it supports setting and canceling 'automatic margin addition'.

Key steps for using the API

API Parameters

POST /openApi/swap/v1/trade/autoAddMargin

rate limitation by UID: 2/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
symbol
string
Yes
Trading pair, e.g., BTC-USDT, ...
positionId
int64
Yes
Position ID
functionSwitch
string
Yes
Whether to enable the automati...
amount
string
No
Amount of margin to be added, ...
timestamp
int64
Yes
Timestamp of the request, in m...
recvWindow
int64
No
Request validity window, in mi...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v1/trade/autoAddMargin'
    method = "POST"
    paramsMap = {
    "symbol": "BTC-USDT",
    "positionId": "1868671302923976704",
    "functionSwitch": "true",
    "amount": "130",
    "timestamp": "1702718148654",
    "recvWindow": "10000"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature
