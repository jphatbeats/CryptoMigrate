Account Endpoints
Query account data
Get asset information of userâ€˜s Perpetual Account of USDC and USDT

Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

GET /openApi/swap/v3/user/balance

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Read
Content-Type:  
  
RequestResponse
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v3/user/balance'
    method = "GET"
    paramsMap = {}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query position data
Retrieve information on users' positions of Perpetual Swap.

Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

GET /openApi/swap/v2/user/positions

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Read
Content-Type:  
  
RequestResponse
symbol
string
no
There must be a hyphen/ "-" in...
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/user/positions'
    method = "GET"
    paramsMap = {
    "symbol": "BNB-USDT"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Get Account Profit and Loss Fund Flow
Query the capital flow of the perpetual contract under the current account.

Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

If neither startTime nor endTime is sent, only the data of the last 7 days will be returned.

If the incomeType is not sent, return all types of account profit and loss fund flow.

Only keep the last 3 months data.

GET /openApi/swap/v2/user/income

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponseincomeType
symbol
string
no
There must be a hyphen/ "-" in...
incomeType
string
no
Income type, see remarks
startTime
int64
no
start time
endTime
int64
no
end time
limit
int64
no
Number of result sets to retur...
timestamp
int64
yes
request timestamp in milliseco...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/user/income'
    method = "GET"
    paramsMap = {
    "startTime": "1702713615001",
    "endTime": "1702731787011",
    "limit": "1000"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Export fund flow
Export fund flow

Key steps for using the API

response: Excel File
1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

Only keep the last 3 months data.

GET /openApi/swap/v2/user/income/export

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
Request
symbol
string
no
trading pair, for example: BTC...
incomeType
string
no
Fund flow type, optional value...
startTime
int64
no
Start time, unit: millisecond
endTime
int64
no
End time, unit: millisecond
limit
int
no
Number of returned result sets...
timestamp
int64
yes
request timestamp, unit: milli...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/user/income/export'
    method = "GET"
    paramsMap = {
    "endTime": "",
    "limit": "200",
    "recvWindow": "10000",
    "startTime": "",
    "symbol": "BTC-USDT"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)
    headers = {
        'X-BX-APIKEY': APIKEY,
    }
    response = requests.request(method, url, headers=headers, data=payload)
    return response.text

def parseParam(paramsMap):
    sortedKeys = sorted(paramsMap)
    paramsStr = "&".join(["%s=%s" % (x, paramsMap[x]) for x in sortedKeys])
    if paramsStr != "": 
     return paramsStr+"&timestamp="+str(int(time.time() * 1000))
    else:
     return paramsStr+"timestamp="+str(int(time.time() * 1000))


if __name__ == '__main__':
    print("demo:", demo())
Query Trading Commission Rate
Obtain the transaction rate for the current user

Key steps for using the API

1. Create Account
  
2. Pass KYC/KYB
  
3. Create API KEY
  
4. Configure API KEY permissions
  
5. Understanding signature authentication
 6. Run the following example code  
7. Understand common error codes
  
8. Understand rate limitations
  
9. Understanding request timestamps
 
10. Understand fee schedule
 
11. Understand trading rules
request parameters https://open-api.bingx.com

GET /openApi/swap/v2/user/commissionRate

rate limitation by UID: 5/s & rate limitation by IP in group Number: 
API KEY permission: 
Perpetual Futures Trading
Content-Type:  
  
RequestResponse
timestamp
int64
yes
request timestamp, unit: milli...
recvWindow
int64
no
Request valid time window valu...
  
Sample code
PythonGolangNodejsJavaC#phpShell

import time
import requests
import hmac
from hashlib import sha256

APIURL = "https://open-api.bingx.com"
APIKEY = ""
SECRETKEY = ""

def demo():
    payload = {}
    path = '/openApi/swap/v2/user/commissionRate'
    method = "GET"
    paramsMap = {
    "recvWindow": "5000"
}
    paramsStr = parseParam(paramsMap)
    return send_request(method, path, paramsStr, payload)

def get_sign(api_secret, payload):
    signature = hmac.new(api_secret.encode("utf-8"), payload.encode("utf-8"), digestmod=sha256).hexdigest()
    print("sign=" + signature)
    return signature


def send_request(method, path, urlpa, payload):
    url = "%s%s?%s&signature=%s" % (APIURL, path, urlpa, get_sign(SECRETKEY, urlpa))
    print(url)